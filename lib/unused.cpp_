void CreateMas(int N){
  r_perp = new double [N];
  Rtr = new double [N];
  // der = new double [N];
  for (int i = 0; i < N; i++) {
    r_perp[i] = 0.0;
    Rtr[i] = 0.0;
    // der[i] = 0.0;
  }
}

void DelMas(){
  delete[]r_perp;
  delete[]Rtr;
  // delete[]der;
}

std::vector <double> rkf45_3d (std::vector<double> vr0,
                              std::vector <double> (*vDeriv)(std::vector <double>, std::vector <double>),
                              std::vector <double> arg2) {
  double h = -1;
  double *k = new double [6];
  double *l = new double [6];
  double *m = new double [6];
  double s, err_y = 1e-4, diff_y;

  std::vector <double> vXYZ = vr0, vXYZ_(3);
  std::vector <double> vDfDr(3);

  while (NORM(vXYZ) > 1.0) {
    vDfDr = vDeriv(vXYZ, arg2);
    k[0] = h * vDfDr[0];
    l[0] = h * vDfDr[1];
    m[0] = h * vDfDr[2];
    vXYZ_[0] = vXYZ[0] + 0.25 * k[0];
    vXYZ_[1] = vXYZ[1] + 0.25 * l[0];
    vXYZ_[2] = vXYZ[2] + 0.25 * m[0];
    vDfDr = vDeriv(vXYZ_, arg2);
    k[1] = h * vDfDr[0];
    l[1] = h * vDfDr[1];
    m[1] = h * vDfDr[2];
    vXYZ_[0] = vXYZ[0] + (3./32.) * k[0] + (9./32.) * k[1];
    vXYZ_[1] = vXYZ[1] + (3./32.) * l[0] + (9./32.) * l[1];
    vXYZ_[2] = vXYZ[2] + (3./32.) * m[0] + (9./32.) * m[1];
    vDfDr = vDeriv(vXYZ_, arg2);
    k[2] = h * vDfDr[0];
    l[2] = h * vDfDr[1];
    m[2] = h * vDfDr[2];
    vXYZ_[0] = vXYZ[0] + (1932./2197.) * k[0] - (7200./2197.) * k[1] + (7296./2197.) * k[2];
    vXYZ_[1] = vXYZ[1] + (1932./2197.) * l[0] - (7200./2197.) * l[1] + (7296./2197.) * l[2];
    vXYZ_[2] = vXYZ[2] + (1932./2197.) * m[0] - (7200./2197.) * m[1] + (7296./2197.) * m[2];
    vDfDr = vDeriv(vXYZ_, arg2);
    k[3] = h * vDfDr[0];
    l[3] = h * vDfDr[1];
    m[3] = h * vDfDr[2];
    vXYZ_[0] = vXYZ[0] + (439./216.) * k[0] - 8. * k[1] + (3680./513.) * k[2] - (845./4104.) * k[3];
    vXYZ_[1] = vXYZ[1] + (439./216.) * l[0] - 8. * l[1] + (3680./513.) * l[2] - (845./4104.) * l[3];
    vXYZ_[2] = vXYZ[2] + (439./216.) * m[0] - 8. * m[1] + (3680./513.) * m[2] - (845./4104.) * m[3];
    vDfDr = vDeriv(vXYZ_, arg2);
    k[4] = h * vDfDr[0];
    l[4] = h * vDfDr[1];
    m[4] = h * vDfDr[2];
    vXYZ_[0] = vXYZ[0] - (8./27.) * k[0] + 2. * k[1] - (3544./2565.) * k[2] + (1859./4104.) * k[3] - (11./40.) * k[4];
    vXYZ_[1] = vXYZ[1] - (8./27.) * l[0] + 2. * l[1] - (3544./2565.) * l[2] + (1859./4104.) * l[3] - (11./40.) * l[4];
    vXYZ_[2] = vXYZ[2] - (8./27.) * m[0] + 2. * m[1] - (3544./2565.) * m[2] + (1859./4104.) * m[3] - (11./40.) * m[4];
    vDfDr = vDeriv(vXYZ_, arg2);
    k[5] = h * vDfDr[0];
    l[5] = h * vDfDr[1];
    m[5] = h * vDfDr[2];

    // 4th order:
    vXYZ_[0] = vXYZ[0] + (25./216.) * k[0] + (1408./2565.) * k[2] + (2197./4101.) * k[3] - (1./5.) * k[4];
    vXYZ_[1] = vXYZ[1] + (25./216.) * l[0] + (1408./2565.) * l[2] + (2197./4101.) * l[3] - (1./5.) * l[4];
    vXYZ_[2] = vXYZ[2] + (25./216.) * m[0] + (1408./2565.) * m[2] + (2197./4101.) * m[3] - (1./5.) * m[4];

    // 5th order:
    vXYZ[0] = vXYZ[0] + (16./135.) * k[0] + (6656./12825.) * k[2] + (28561./56430.) * k[3] - (9./50.) * k[4] + (2./55.) * k[5];
    vXYZ[1] = vXYZ[1] + (16./135.) * l[0] + (6656./12825.) * l[2] + (28561./56430.) * l[3] - (9./50.) * l[4] + (2./55.) * l[5];
    vXYZ[2] = vXYZ[2] + (16./135.) * m[0] + (6656./12825.) * m[2] + (28561./56430.) * m[3] - (9./50.) * m[4] + (2./55.) * m[5];

    h = fabs(h);

    diff_y = sqrt(SQR(vXYZ[0] - vXYZ_[0]) + SQR(vXYZ[1] - vXYZ_[1]) + SQR(vXYZ[2] - vXYZ_[2]));
    if (diff_y == 0)
      s = 1.0;
    else
      s = pow(err_y * h * 0.5 / diff_y, 0.25);

    if (s < 0.75) {
      h = (0.5 * h < 0.01) ? 0.01 : 0.5 * h;
    } else if (s > 1.5) {
      h = (2 * h < 1.0) ? 2 * h : 1.0;
    }
    cout << "\tstepsize:" << h << "\n";
    h = - h;
  }
  // rk4
  // while (NORM(vXYZ) > 1.0) {
  //   vDfDr = vDeriv(vXYZ, arg2);
  //   k[0] = h * vDfDr[0];
  //   l[0] = h * vDfDr[1];
  //   m[0] = h * vDfDr[2];
  //   vXYZ_[0] = vXYZ[0] + 0.5 * k[0];
  //   vXYZ_[1] = vXYZ[1] + 0.5 * l[0];
  //   vXYZ_[2] = vXYZ[2] + 0.5 * m[0];
  //   vDfDr = vDeriv(vXYZ_, arg2);
  //   k[1] = h * vDfDr[0];
  //   l[1] = h * vDfDr[1];
  //   m[1] = h * vDfDr[2];
  //   vXYZ_[0] = vXYZ[0] + 0.5 * k[1];
  //   vXYZ_[1] = vXYZ[1] + 0.5 * l[1];
  //   vXYZ_[2] = vXYZ[2] + 0.5 * m[1];
  //   vDfDr = vDeriv(vXYZ_, arg2);
  //   k[2] = h * vDfDr[0];
  //   l[2] = h * vDfDr[1];
  //   m[2] = h * vDfDr[2];
  //   vXYZ_[0] = vXYZ[0] + k[2];
  //   vXYZ_[1] = vXYZ[1] + l[2];
  //   vXYZ_[2] = vXYZ[2] + m[2];
  //   vDfDr = vDeriv(vXYZ_, arg2);
  //   k[3] = h * vDfDr[0];
  //   l[3] = h * vDfDr[1];
  //   m[3] = h * vDfDr[2];
  //   vXYZ[0] += (k[0] + 2 * k[1] + 2 * k[2] + k[3]) / 6.;
  //   vXYZ[1] += (l[0] + 2 * l[1] + 2 * l[2] + l[3]) / 6.;
  //   vXYZ[2] += (m[0] + 2 * m[1] + 2 * m[2] + m[3]) / 6.;
  // }
  return vXYZ;
}
